import{o as a,c as s,d as n}from"./app.72f529ff.js";const t='{"title":"js 基础","description":"javascrit learing","frontmatter":{"page":true,"title":"js 基础","description":"javascrit learing","sidebar":true,"date":"2021-07-06","tags":["js"]},"headers":[{"level":2,"title":"JSON.stringify()","slug":"json-stringify"},{"level":2,"title":"JSON.parse()","slug":"json-parse"},{"level":2,"title":"客户端存储","slug":"客户端存储"},{"level":3,"title":"cookie","slug":"cookie"},{"level":3,"title":"storage","slug":"storage"},{"level":3,"title":"sessionStorage","slug":"sessionstorage"},{"level":3,"title":"localStorage","slug":"localstorage"},{"level":2,"title":"BEM","slug":"bem"},{"level":3,"title":"命名约定","slug":"命名约定"},{"level":3,"title":"如何使用?","slug":"如何使用"},{"level":2,"title":"CSS float 属性","slug":"css-float-属性"},{"level":2,"title":"CSS中 link 和@import 的区别","slug":"css中-link-和-import-的区别"},{"level":2,"title":"回流和重绘","slug":"回流和重绘"},{"level":2,"title":"git add","slug":"git-add"},{"level":2,"title":"script setup","slug":"script-setup"}],"relativePath":"note/js/基础.md","lastUpdated":1625651875468}',e={},p=n('<h2 id="json-stringify"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> <strong>JSON.stringify()</strong></h2><ol><li><p><code>undefined</code> 的任何属性也会被跳过。</p></li><li><p><code>JSON.stringify()</code>方法除了要序列化的对象，还可以接收两个参数。</p><ul><li>第一个参数是过滤器，可以是数组或函数；</li><li>第二个参数是用 于缩进结果 JSON 字符串的选项。单独或组合使用这些参数可以更好地控制 JSON 序列化。</li><li>有时候，对象需要在 <code>JSON.stringify()</code>之上自定义 JSON 序列化。此时，可以在要序列化的对象 中添加 <code>toJSON()</code>方法 。</li></ul></li><li><p>toJSON()方法可以与过滤函数一起使用，因此理解不同序列化流程的顺序非常重要。在把对象传 给 JSON.stringify()时会执行如下步骤。</p><p>(1) 如果可以获取实际的值，则调用 <code>toJSON()</code>方法获取实际的值，否则使用默认的序列化。</p><p>(2) 如果提供了第二个参数，则应用过滤。传入过滤函数的值就是第(1)步返回的值。</p><p>(3) 第(2)步返回的每个值都会相应地进行序列化。</p></li></ol><h2 id="json-parse"><a class="header-anchor" href="#json-parse" aria-hidden="true">#</a> <strong>JSON.parse()</strong></h2><p><code>JSON.parse()</code>方法也可以接收一个额外的参数，同<code>JSON.stringify()</code>第二个函数。</p><h2 id="客户端存储"><a class="header-anchor" href="#客户端存储" aria-hidden="true">#</a> 客户端存储</h2><h3 id="cookie"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><p>用于在客户端存储会话信息，cookie 是与特定域绑定的,是收同源测试限制的，为保证它不会被恶意利用，浏览器会施加限制。</p><h3 id="storage"><a class="header-anchor" href="#storage" aria-hidden="true">#</a> storage</h3><p><code>clear()：</code>删除所有值；不在 Firefox 中实现。</p><p><code>setItem(name, value)：</code>设置给定 name 的值。</p><p><code>getItem(name)：</code>取得给定 name 的值。</p><p><code>key(index)：</code>取得给定数值位置的名称。</p><p><code>emoveItem(name)：</code>删除给定 name 的名/值对。</p><h3 id="sessionstorage"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h3><p>sessionStorage 对象只存储会话数据，这意味着数据只会存储到浏览器关闭。这跟浏览器关闭时 会消失的会话 cookie 类似。存储在 sessionStorage 中的数据不受页面刷新影响，可以在浏览器崩溃 并重启后恢复。</p><h3 id="localstorage"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h3><p>在客户端持久存储 数据的机制。要访问同一个 localStorage 对象，页面必须来自同一个域（子域不可以）、在相同的端 口上使用相同的协议。</p><p>两种存储方法的区别在于，存储在 localStorage 中的数据会保留到通过 JavaScript 删除或者用户 清除浏览器缓存。localStorage 数据不受页面刷新影响，也不会因关闭窗口、标签页或重新启动浏览 器而丢失。</p><h2 id="bem"><a class="header-anchor" href="#bem" aria-hidden="true">#</a> BEM</h2><h3 id="命名约定"><a class="header-anchor" href="#命名约定" aria-hidden="true">#</a> 命名约定</h3><p>BEM：块（block）、元素（element）、修饰符（modifier） 命名约定的模式</p><div class="language-css"><pre><code><span class="token selector">.block</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.block__element</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.block--modifier</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><p>其中块可以用单个连字符来界定：如</p><div class="language-css"><pre><code><span class="token selector">.site-search</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token selector">//块\n.site-search__field</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token selector">//元素\n.site-search--full</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  //修饰符\n</code></pre></div><h3 id="如何使用"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用?</h3><p>Block:一个独立的，可以复用而不依赖其他组件的部分，可作为一个块 Element:属于块的某部分，可作为一个元素 Modifier:用于修饰块或元素，体现出外形行为状态等特征的，可作为一个修饰器 1）保证各个部分只有一级B__E–M，修饰器需要和对应的块或元素一起使用，避免单独使用。 2）仅以类名作为选择器，不使用ID或标签名来约束选择器，且css中的选择器嵌套不超过2层 3）避免 .block__el1__el2 的格式</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>article<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>article__body<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>article__button--primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>article__button--success<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-less"><pre><code><span class="token selector">.article</span> <span class="token punctuation">{</span>\n    <span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>\n    <span class="token selector">&amp;__body</span> <span class="token punctuation">{</span>\n        <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token selector">&amp;__button</span> <span class="token punctuation">{</span>\n        <span class="token property">padding</span><span class="token punctuation">:</span> 5px 8px<span class="token punctuation">;</span>\n        <span class="token selector">&amp;--primary</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span>\n        <span class="token selector">&amp;--success</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="css-float-属性"><a class="header-anchor" href="#css-float-属性" aria-hidden="true">#</a> CSS float 属性</h2><p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs2m90g6trj312c084tb5.jpg" alt="Screen Shot 2021-07-02 at 3.01.17 PM"></p><h2 id="css中-link-和-import-的区别"><a class="header-anchor" href="#css中-link-和-import-的区别" aria-hidden="true">#</a> CSS中 link 和@import 的区别</h2><p>link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载</p><p>link方式的样式的权重 高于@import的权重</p><h2 id="回流和重绘"><a class="header-anchor" href="#回流和重绘" aria-hidden="true">#</a> 回流和重绘</h2><p><a href="https://www.cnblogs.com/zhutao/p/6551216.html" target="_blank" rel="noopener noreferrer">reflow(回流)和repaint(重绘)</a></p><p>**简要：**整个在浏览器的渲染过程中（页面初始化，用户行为改变界面样式，动画改变界面样式等）reflow(回流)和repaint(重绘) 会大大影响web性能，尤其是手机页面。因此我们在页面设计的时候要尽量减少reflow和repaint。</p><p><strong>什么是reflow和repaint（原文链接：<a href="http://www.cnblogs.com/Peng2014/p/4687218.html%EF%BC%89" target="_blank" rel="noopener noreferrer">http://www.cnblogs.com/Peng2014/p/4687218.html）</a></strong></p><p>reflow：例如某个子元素样式发生改变，直接影响到了其父元素以及往上追溯很多祖先元素（包括兄弟元素），这个时候浏览器要重新去渲染这个子元素相关联的所有元素的过程称为回流。</p><p><strong>reflow：几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</strong></p><p>**repaint：**如果只是改变某个元素的背景色、文 字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。repaint 的速度明显快于 reflow</p><p>下面情况会导致reflow发生</p><p><strong>1：改变窗口大小</strong></p><p><strong>2：改变文字大小</strong></p><p><strong>3：内容的改变，如用户在输入框中敲字</strong></p><p><strong>4：激活伪类，如:hover</strong></p><p><strong>5：操作class属性</strong></p><p><strong>6：脚本操作DOM</strong></p><p><strong>7：计算offsetWidth和offsetHeight</strong></p><p><strong>8：设置style属性</strong></p><h2 id="git-add"><a class="header-anchor" href="#git-add" aria-hidden="true">#</a> git add</h2><p><code>git add -A</code> 提交所有变化</p><p><code>git add -u</code> 提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p><p><code>git add .</code> 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p><h2 id="script-setup"><a class="header-anchor" href="#script-setup" aria-hidden="true">#</a> script setup</h2>',55);e.render=function(n,t,e,o,c,l){return a(),s("div",null,[p])};export default e;export{t as __pageData};
