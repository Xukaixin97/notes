import{o as e,c as a,d as n}from"./app.72f529ff.js";const s='{"title":"弹性布局2","description":"About me test2","frontmatter":{"page":true,"title":"弹性布局2","description":"About me test2","sidebar":true,"date":"2021-07-06","tags":["css","flex","grid"]},"headers":[{"level":2,"title":"传统布局属性","slug":"传统布局属性"},{"level":2,"title":"Flex","slug":"flex"},{"level":2,"title":"块级元素","slug":"块级元素"},{"level":2,"title":"box-sizing","slug":"box-sizing"},{"level":2,"title":"box-shadow","slug":"box-shadow"},{"level":2,"title":"居中","slug":"居中"},{"level":2,"title":"Grid","slug":"grid"},{"level":3,"title":"justify-items  align-items  place-items","slug":"justify-items-align-items-place-items"},{"level":3,"title":"justify-content  align-content  place-content","slug":"justify-content-align-content-place-content"},{"level":3,"title":"grid-template 属性  grid 属性","slug":"grid-template-属性-grid-属性"},{"level":2,"title":"项目属性","slug":"项目属性"},{"level":3,"title":"grid-column  grid-row","slug":"grid-column-grid-row"},{"level":3,"title":"grid-area","slug":"grid-area"},{"level":3,"title":"justify-self align-self  place-self","slug":"justify-self-align-self-place-self"}],"relativePath":"note/css/弹性布局.md","lastUpdated":1625640983887}',t={},o=n('<p><a href="https://www.runoob.com/cssref/css-selectors.html" target="_blank" rel="noopener noreferrer">CSS选择器</a></p><h2 id="传统布局属性"><a class="header-anchor" href="#传统布局属性" aria-hidden="true">#</a> 传统布局属性</h2><ol><li><p>display</p></li><li><p>flex</p></li><li><p>positon</p></li></ol><h1 id="flex-grid"><a class="header-anchor" href="#flex-grid" aria-hidden="true">#</a> Flex&amp;Grid</h1><p>Flex 布局是轴线布局，只能指定&quot;项目&quot;针对轴线的位置，可以看作是<strong>一维布局</strong>。Grid 布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生单元格，然后指定&quot;项目所在&quot;的单元格，可以看作是<strong>二维布局</strong>。Grid 布局远比 Flex 布局强大。</p><h2 id="flex"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> Flex</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><ul><li><p><strong>flex-direction</strong></p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul></li><li><p><strong>flex-wrap</strong></p><ul><li><code>nowrap</code>（默认）：不换行。</li><li><code>wrap</code>：换行，第一行在上方。</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul></li><li><p><strong>flex-flow</strong></p><p>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><div class="language-css"><pre><code><span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt; || &lt;flex-wrap&gt;<span class="token punctuation">;</span>\n</code></pre></div></li><li><p><strong>justify-content</strong></p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li><p><strong>align-items</strong></p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li><li><p><strong>align-content</strong></p><p>​ 对于只有一行的flex元素，align-content是没有效果的</p><ul><li><p><code>flex-start</code>：与交叉轴的起点对齐。</p></li><li><p><code>flex-end</code>：与交叉轴的终点对齐。</p></li><li><p><code>center</code>：与交叉轴的中点对齐。</p></li><li><p><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</p></li><li><p><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p></li><li><p><code>stretch</code>（默认值）：轴线占满整个交叉轴。</p><p>align-content`属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p></li></ul></li></ul><h4 id="项目的属性"><a class="header-anchor" href="#项目的属性" aria-hidden="true">#</a> 项目的属性</h4><ul><li><p><code>order</code></p><p>顺序</p></li><li><p><code>flex-grow</code></p><p>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p><code>flex-shrink</code></p><p>缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p>如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。(不缩放，不会换行)</p></li><li><p><code>flex-basis</code> 分配剩余空间之前，项目的占据的大小</p><ul><li></li></ul><pre><code>  ```css\n  flex-basis: &lt;length&gt; | auto;\n  ```\n</code></pre></li><li><p><code>flex</code></p><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><p><strong>flex不同取值对应的情况：</strong></p><ol><li><code>flex</code> 取值为 <code>none</code>，则计算值为 0 0 auto；</li><li><code>flex</code> 取值为 <code>auto</code>，则计算值为 1 1 auto。</li><li><code>flex</code> 取值为一个非负数字，则该数字为 <code>flex-grow</code> 值，<code>flex-shrink</code> 取 1，<code>flex-basis</code> 取 0%。</li><li><code>flex</code> 取值为一个长度或百分比，则视为 <code>flex-basis</code> 值，<code>flex-grow</code> 取 1，<code>flex-shrink</code> 取 1。</li><li><code>flex</code> 取值为两个非负 数字，则分别视为 <code>flex-grow</code> 和 <code>flex-shrink</code> 的值，<code>flex-basis</code> 取 0%。</li><li><code>flex</code> 取值为一个非负数字和一个长度或百分比，则分别视为 <code>flex-grow</code> 和 <code>flex-basis</code> 的值，<code>flex-shrink</code> 取 1。</li></ol></li><li><p><code>align-self</code></p><ul><li><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></li><li><div class="language-css"><pre><code>  auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>\n</code></pre></div></li></ul></li></ul><p><a href="https://www.cnblogs.com/hualiu0/p/5319046.html" target="_blank" rel="noopener noreferrer">CSS3 响应式布局： @media (min/max-width:***) @font-face</a></p><h2 id="块级元素"><a class="header-anchor" href="#块级元素" aria-hidden="true">#</a> 块级元素</h2><p>1.行内元素：不独占一行，不能设置宽高 2.块级元素：独占一行，能设置宽高 3.行内块元素：不独占一行，但可以设置宽高</p><h2 id="box-sizing"><a class="header-anchor" href="#box-sizing" aria-hidden="true">#</a> box-sizing</h2><ul><li><code>content-box</code> 是默认值。如果你设置一个元素的宽为100px，不包括padding，border，margin。</li><li><code>border-box</code> 宽带包括padding，border，不包括margin。</li></ul><h2 id="box-shadow"><a class="header-anchor" href="#box-shadow" aria-hidden="true">#</a> box-shadow</h2><p>/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */ box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);</p><h2 id="居中"><a class="header-anchor" href="#居中" aria-hidden="true">#</a> 居中</h2><p>margin:0 auto是用于block的，无法用于inline-block。</p><p>inline-block要居中就更简单了，只需要父级元素设置text-align:center;</p><h2 id="grid"><a class="header-anchor" href="#grid" aria-hidden="true">#</a> <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener noreferrer">Grid</a></h2><h4 id="grid-template-columns属性定义每一列的列宽"><a class="header-anchor" href="#grid-template-columns属性定义每一列的列宽" aria-hidden="true">#</a> <code>grid-template-columns</code>属性定义每一列的列宽</h4><h4 id="grid-template-rows属性定义每一行的行高"><a class="header-anchor" href="#grid-template-rows属性定义每一行的行高" aria-hidden="true">#</a> <code>grid-template-rows</code>属性定义每一行的行高</h4><p>除了使用绝对单位，也可以使用百分比。</p><div class="language-css"><pre><code><span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>33.3%<span class="token punctuation">)</span> # 33.3% 33.3% 33.3%\n<span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>10px 20px<span class="token punctuation">)</span> # 10px 20px 10px 20px \n<span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span>100px<span class="token punctuation">)</span> #每列宽度100px，然后自动填充，直到容器不能放置更多的列\nfr # 占比\n<span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span> # 最小100px 最大1fr\nauto # 浏览器自己决定\n<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c1] 100px [c2] 100px [c3] auto [c4]<span class="token punctuation">;</span> # 网格线命名\n\n</code></pre></div><h4 id="间隔"><a class="header-anchor" href="#间隔" aria-hidden="true">#</a> 间隔</h4><div class="language-css"><pre><code>column-gap\nrow-gap\n<span class="token property">gap</span><span class="token punctuation">:</span> &lt;row-gap&gt; &lt;column-gap&gt; \n</code></pre></div><h4 id="grid-template-areas"><a class="header-anchor" href="#grid-template-areas" aria-hidden="true">#</a> grid-template-areas</h4><div class="language-css"><pre><code> <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">&#39;a b c&#39;</span>\n                       <span class="token string">&#39;d e f&#39;</span>\n                       <span class="token string">&#39;g h i&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="grid-auto-flow"><a class="header-anchor" href="#grid-auto-flow" aria-hidden="true">#</a> grid-auto-flow</h4><div class="language-css"><pre><code> <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column | row | row <span class="token function">dense</span><span class="token punctuation">(</span>紧密排列<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="justify-items-align-items-place-items"><a class="header-anchor" href="#justify-items-align-items-place-items" aria-hidden="true">#</a> justify-items align-items place-items</h3><p>设置单元格内容的水平位置</p><div class="language-css"><pre><code><span class="token property">place-items</span><span class="token punctuation">:</span> &lt;align-items&gt; &lt;justify-items&gt;<span class="token punctuation">;</span>\n</code></pre></div><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li></ul><h3 id="justify-content-align-content-place-content"><a class="header-anchor" href="#justify-content-align-content-place-content" aria-hidden="true">#</a> justify-content align-content place-content</h3><p>是整个grid在父容器里面的水平位置</p><div class="language-css"><pre><code> <span class="token property">justify-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>\n  <span class="token property">align-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span> \n  <span class="token property">place-content</span><span class="token punctuation">:</span> &lt;align-content&gt; &lt;justify-content&gt;\n</code></pre></div><p>space-around和space-evently的区别</p><p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</p><p>space-evently：项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</p><h3 id="grid-template-属性-grid-属性"><a class="header-anchor" href="#grid-template-属性-grid-属性" aria-hidden="true">#</a> grid-template 属性 grid 属性</h3><p><code>grid-template</code>简写</p><p><code>grid-template-columns</code></p><p><code>grid-template-rows</code></p><p><code>grid-template-areas</code></p><p><code>grid</code>属性简写</p><p><code>grid-template-rows</code></p><p><code>grid-template-columns</code></p><p><code>grid-template-areas</code>、</p><p><code>grid-auto-rows</code></p><p><code>grid-auto-columns</code></p><p><code>grid-auto-flow</code></p><h2 id="项目属性"><a class="header-anchor" href="#项目属性" aria-hidden="true">#</a> 项目属性</h2><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li><code>grid-row-end</code>属性：下边框所在的水平网格线</li></ul><div class="language-css"><pre><code><span class="token selector">.item-1</span> <span class="token punctuation">{</span>\n  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span> # 指定为网格线的名字。\n  <span class="token property">grid-column-end</span><span class="token punctuation">:</span>  span 2<span class="token punctuation">;</span><span class="token punctuation">;</span># 表示<span class="token string">&quot;跨越&quot;</span>，即左右边框（上下边框）之间跨越多少个网格。\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="grid-column-grid-row"><a class="header-anchor" href="#grid-column-grid-row" aria-hidden="true">#</a> grid-column grid-row</h3><div class="language-css"><pre><code><span class="token selector">.item</span> <span class="token punctuation">{</span>\n  <span class="token property">grid-column</span><span class="token punctuation">:</span> &lt;start-line&gt; / &lt;end-line&gt;<span class="token punctuation">;</span>\n  <span class="token property">grid-row</span><span class="token punctuation">:</span> &lt;start-line&gt; / &lt;end-line&gt;<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="grid-area"><a class="header-anchor" href="#grid-area" aria-hidden="true">#</a> grid-area</h3><div class="language-css"><pre><code><span class="token selector">.item-1</span> <span class="token punctuation">{</span>\n  <span class="token property">grid-area</span><span class="token punctuation">:</span> e<span class="token punctuation">;</span> # 指定项目放在哪一个区域。\n  <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="justify-self-align-self-place-self"><a class="header-anchor" href="#justify-self-align-self-place-self" aria-hidden="true">#</a> justify-self align-self place-self</h3><p>设置单元格内容的水平位置</p><div class="language-css"><pre><code><span class="token selector">.item</span> <span class="token punctuation">{</span>\n  <span class="token property">justify-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>\n  &lt;align-self&gt; &lt;justify-self&gt;<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',63);t.render=function(n,s,t,l,c,p){return e(),a("div",null,[o])};export default t;export{s as __pageData};
